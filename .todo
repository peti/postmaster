<!-- Automagically generated by the ToDo program on Thu Jun 23 13:18:43 2005 -->
<todo version="0.1.18">
    <title>
        Postmaster
    </title>
    <note priority="veryhigh" time="1099264722" done="1099303821">
        figure out why mailid is assigned twice for mail from:&lt;&gt;
        <comment>
            fixed bug in impatient
        </comment>
    </note>
    <note priority="veryhigh" time="1107927331" done="1107978554">
        read timeouts currently are behind 'safe'
        <comment>
            fixed
        </comment>
    </note>
    <note priority="veryhigh" time="1108001576" done="1108047273">
        process crashes when spool file is erased
        <comment>
            fixed
        </comment>
    </note>
    <note priority="veryhigh" time="1108043262" done="1108047347">
        What SessionState are we in when StartData fails?
        <comment>
            handleDialog will set HaveHelo
        </comment>
    </note>
    <note priority="high" time="1098655722" done="1098737399">
        Handler needs a Handler(Status|State) field in Target.
        <comment>
            Implemented. We know have 5 handler status
            codes: Ready, Live, Succeeded, Failed,
            FailedPermanently. The Deliver event uses them
            to determine correct SmtpReply. The semantics
            are: If one target is okay, the whole data
            transaction is okay. If all fail permanently,
            the transaction fails permanently. Otherwise the
            transaction falis with a 4xx code.
        </comment>
    </note>
    <note priority="high" time="1098656254" done="1107927357">
        We need a spooler.

        If the external handler returns an error, we cannot
        create a bounce message because we don't have the
        payload anymore! With sendmail as backend, this
        doesn't matter because sendmail does bounce the mail
        in case of an error, but we rather soon need a
        spooler that writes everything to disk, just in
        case. From there, a spool manager could retry
        delivery, etc.
        <comment>
            done
        </comment>
    </note>
    <note priority="high" time="1098658162" done="1099014967">
        Need combinators to create targets (fwd, alias, etc.)
        <comment>
            done: 'relay' and 'pipe'
        </comment>
    </note>
    <note priority="high" time="1098924318" done="1107739248">
        smtpdMain has to protect accept with 'bracket'
        <comment>
            accept looks safe now for all practical purposes
        </comment>
    </note>
    <note priority="high" time="1099253001" done="1107978575">
        Start shells with "set +e".
        <comment>
            we don't start shells anymore
        </comment>
    </note>
    <note priority="high" time="1099253334" done="1107534743">
        Replace Val with Data.Dynamic
        <comment>
            code moved to MonadEnv module
        </comment>
    </note>
    <note priority="high" time="1099253516" done="1107739100">
        Model a generic stream processor through a Stream a datatype!
        <comment>
            Unnecessary with the new design.
        </comment>
    </note>
    <note priority="medium" time="1098325598" done="1098585670">
        Does the eventHandler have to set sessionState?
        <comment>
            No, it does not. handleDialog and handleData set
            the sessionState according to the results of
            smtpdFSM. The user callbacks should not (and in
            fact cannot) interfere.
        </comment>
    </note>
    <note priority="medium" time="1098329354" done="1107739271">
        Log timeouts where they occur, not in runSmtpd.
        <comment>
            Nope, we use safeWrite combinator now.
        </comment>
    </note>
    <note priority="medium" time="1098329496" done="1098585655">
        Add "Greeting" event.
        <comment>
            Done. The event is triggered by runSmtpd before
            anything else happens. It can be used to
            initialize the SmtpdState for the rest of the
            session.
        </comment>
    </note>
    <note priority="medium" time="1098713602" done="1098738894">
        If "greeting" returns failure code, abort the connection.
        <comment>
            Implemented. Anything but 2xx will cause
            runSmtpd to drop the connection.
        </comment>
    </note>
    <note priority="medium" time="1098748188" done="1107978651">
        Avoid zombie processes by waiting for the child

        The changes in commitTarget (safeGetExitCode instead
        of waitForProcess) should fix that.

        There remains the case of the process aborting
        abnormally, or the I/O thread that holds the handle
        received an exception. I have a finalizer attached
        to the ExternHandle, which will kill, then wait for
        the child. Will see whether that helps.
        <comment>
            fixed in new architecture
        </comment>
    </note>
    <note priority="medium" time="1098894546" done="1107927427">
        'smtpdMain' should expect a Socket, not a PortID.
        <comment>
            smtpdServer can run from any socket now
        </comment>
    </note>
    <note priority="medium" time="1098939046" done="1099015643">
        I need a better shutdown mechanism than fail
        <comment>
            done: reply 221 and 421 will drop the connection
        </comment>
    </note>
    <note priority="medium" time="1098944687" done="1107927451">
        need debugEH-like wrapper to dump the environment
        <comment>
            isn't trivially possible with Env anymory
        </comment>
    </note>
    <note priority="medium" time="1099011048" done="1107927633">
        Need CRLF conversion for local mailers.

        I have to convert CRLF to LF because some programs,
        like procmail, don't understand CRLF-ended lines.
        This is a job for the dataHandler, obviously. I just
        wonder how to trigger it! For every pipe? Just for
        procmail? Or do nothing and have people call

          #! /bin/sh --
          sed -e 's/^M$//' | /usr/bin/procmail $*

        instead? I need a more flexible Target type. There's
        no way around it. Ideally, a Target could be written
        completely outside of Postmaster, then this were the
        user's problem and not mine. That's the way to do
        it.
        <comment>
            no more local mailers
        </comment>
    </note>
    <note priority="medium" time="1099013220" done="1099093120">
        Need 'closeTarget' to run before 'commitTarget'.
        <comment>
            implemented
        </comment>
    </note>
    <note priority="medium" time="1099252968" done="1107739350">
        write ts :: EnvT a -&gt; EnvT (Timestamped a)
        <comment>
            Not possible because EnvT is not bound to one variable.
        </comment>
    </note>
    <note priority="medium" time="1107470824" done="1107534805">
        replace error with fail wherever possible
        <comment>
            done
        </comment>
    </note>
    <note priority="medium" time="1107743614" done="1107978607">
        smtpd has to check SessionState between lines!
        <comment>
            No, according to the RFC our pipelining is fine.
        </comment>
    </note>
    <note priority="medium" time="1108001616" done="1108052981">
        don't export feed and other internals in FSM.*
        <comment>
            Well, let's expert feed. Whatever.
        </comment>
    </note>
    <note priority="low" time="1098627718" done="1107927500">
        Do "performGC &gt;&gt; yield" when resources run out.

        Although a Handle is garbage-collected in Haskell,
        it is not clear when the appropriate finalizer will
        be run! Thus, it might be a good idea to trigger an
        explicit garbage collection in case we've received
        an exception which signifies that system resources
        are unavailable. This applies to all kind of
        finalizer-based resource management. The only case
        in which the RTS will run the GC itself is when
        memory runs out. But other resources (file
        descriptors, etc.) don't do that.
        <comment>
            we don't use finalizers anymore
        </comment>
    </note>
    <note priority="low" time="1098732401" done="1107739182">
        Need a sub-monad class.

        I need a class which handles the case where the
        state of the outer monad contains the state of the
        inner monad. The class would contain glue code
        telling me how to get/put the state into the outer
        monads data type, and then a simple 'run' should
        suffice to call all sub-monads.

        Declaring "MonadState st" for every contained state
        might do the trick, but I need to allow undecidable
        instances to do that.

          instance (MonadState Config m)
            =&gt; MonadReader Callbacks m where
        <comment>
            New design made this unnecessary.
        </comment>
    </note>
    <note priority="low" time="1098754939" done="1107978635">
        waitForProcess throws exceptions I have to catch

        Glynn Clements writes:

        &gt; Both [getProcessExitCode and waitForProcess]
        &gt; will throw an exception if the process
        &gt; terminated on a signal.

        I've fixed it now, I think. It is horrible:
        'safeWaitForProcess' basically busy-polls the status
        every 1/10 second with a 'timeout' and 'catch'
        wrapped around the whole computation. Processes that
        are terminated by signals will be mapped to "exit 1".

        It appears to be robust so far.
        <comment>
            The entire 'extern' stuff is gone.
        </comment>
    </note>
    <note priority="low" time="1099006932" done="1107927587">
        Batch procmail calls.

        Procmail's -d option allows more than one recipient.
        I need to support that in a useful way, but the
        current Target definition doesn't allow me to batch
        it, because -- in the general case -- I cannot batch
        pipe.
        <comment>
            obsolete with spooler
        </comment>
    </note>
    <note priority="low" time="1099253109" done="1107927617">
        write combinator to catchALL and log all state etc. to disk
        <comment>
            duplicate of #28
        </comment>
    </note>
    <note priority="verylow" time="1099158901" done="1107739414">
        Generally prefix internal functions with _.
        <comment>
            Nope. Don't export internal functions.
        </comment>
    </note>
    <note priority="verylow" time="1099253172" done="1107927475">
        A 'fallback' combinator: "try f e $ either default return" or so
        <comment>
            implemented on top of catch
        </comment>
    </note>
    <note priority="high" time="1108052773">
        Handle sha1 collisions in the spool
    </note>
    <link filename="blockio/.todo" priority="medium" time="0"/>
    <link filename="syslog/.todo" priority="medium" time="0"/>
    <note priority="medium" time="1098589904">
        Need combinator to catch and log the usual exceptions.
    </note>
    <note priority="medium" time="1098656105">
        Add an "InetAddress" type for IPv4 and v6 addresses.

        Also, a class interface which allows to convert all
        kinds of IP-address representations hence and forth
        between my type and HostAddr, SockAddr, etc.
    </note>
    <note priority="medium" time="1098726128">
        Need function to generate received headers
    </note>
    <note priority="medium" time="1100044460">
        deny private addresses (as mx, too)
    </note>
    <note priority="medium" time="1107998544">
        Move stuff from IO to FSM.Timeout
    </note>
    <note priority="low" time="1098656192">
        Find out how RTS settings affect the performance.

        Does the event handler benefit from caching? Or do
        we benefit from aggressive GC because it keeps our
        memory footprint small and ensures all finalizers
        are run quickly? (Currently, only ExternalHandle
        depends on finalizers.)
    </note>
    <note priority="low" time="1099252878">
        Make a prologue file for the haddock index page.
    </note>
    <note priority="low" time="1104539876">
        Need way to accept _all_ e-mail from trusted peers to avoid bounces.
    </note>
    <note priority="low" time="1119525523">
        Get rid of bracketOnError in Postmaster.Base.
    </note>
    <note priority="verylow" time="1097188529">
        Format log messages and map them to priorities.
    </note>
</todo>
